{
  "name": "vips",
  "tagline": "A fast image processing library with low memory needs.",
  "body": "# libvips : an image processing library\r\n\r\n[![Build Status](https://secure.travis-ci.org/jcupitt/libvips.png)](http://travis-ci.org/jcupitt/libvips)\r\n[![Coverity Status](https://scan.coverity.com/projects/6503/badge.svg)](https://scan.coverity.com/projects/jcupitt-libvips)\r\n\r\nlibvips is a 2D image processing library. Compared to\r\nsimilar libraries, [libvips runs quickly and uses little\r\nmemory](http://www.vips.ecs.soton.ac.uk/index.php?title=Speed_and_Memory_Use).\r\nlibvips is licensed under the LGPL 2.1+.\r\n\r\nIt has around 300 operations covering arithmetic, histograms,\r\nconvolutions, morphological operations, frequency filtering, colour,\r\nresampling, statistics and others. It supports a large range of numeric\r\nformats, from 8-bit int to 128-bit complex. It supports a good range of\r\nimage formats, including JPEG, TIFF, PNG, WebP, FITS, Matlab, OpenEXR,\r\nPDF, SVG, HDR, PPM, CSV, GIF, Analyze, DeepZoom, and OpenSlide.  It can\r\nalso load images via ImageMagick or GraphicsMagick.\r\n\r\nIt has APIs for\r\n[C](http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/using-from-c.html)\r\nand\r\n[C++](http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/using-from-cpp.html)\r\nand comes with a [Python\r\nbinding](http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/using-from-python.html)\r\nand a [command-line\r\ninterface](http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/using-cli.html).\r\nBindings are available for [Ruby](https://rubygems.org/gems/ruby-vips),\r\nJavaScript and others. There is full\r\n[documentation](http://www.vips.ecs.soton.ac.uk/supported/current/doc/html/libvips/index.html).\r\nThere are several GUIs as well, see the [VIPS\r\nwebsite](http://www.vips.ecs.soton.ac.uk).\r\n\r\nThere are packages for most unix-like operating systems and binaries for\r\nWindows and OS X.\r\n\r\n# Building libvips from a source tarball\r\n\r\nWe keep pre-baked tarballs of releases on the vips website:\r\n\r\nhttp://www.vips.ecs.soton.ac.uk/supported/current/\r\n\r\nUntar, then in the libvips directory you should just be able to do:\r\n\r\n\t$ ./configure\r\n\r\nCheck the summary at the end of `configure` carefully. \r\nlibvips must have `build-essential`, `pkg-config`, `glib2.0-dev`, and \r\n`libxml2-dev`. \r\n\r\nFor the vips8 Python binding, you must have \r\n`gobject-introspection`, `python-gi-dev`, and `libgirepository1.0-dev`.\r\n\r\nYou'll need the dev packages for the file format support you\r\nwant. For basic jpeg and tiff support, you'll need `libtiff5-dev`,\r\n`libjpeg-turbo8-dev`, and `libgsf-1-dev`.  See the **Dependencies** section\r\nbelow for a full list of the things that libvips can be configured to use.\r\n\r\nOnce `configure` is looking OK, compile and install with the usual:\r\n\r\n\t$ make\r\n\t$ sudo make install\r\n\r\nBy default this will install files to `/usr/local`.\r\n\r\nWe have detailed guides on the wiki for [building on\r\nWindows](http://www.vips.ecs.soton.ac.uk/index.php?title=Build_on_windows)\r\nand [building on OS\r\nX](http://www.vips.ecs.soton.ac.uk/index.php?title=Build_on_OS_X).\r\n\r\n# Building libvips from git\r\n\r\nCheckout the latest sources with:\r\n\r\n\t$ git clone git://github.com/jcupitt/libvips.git\r\n\r\nBuilding from git needs more packages, you'll need at least `swig`, `gtk-doc` \r\nand `gobject-introspection`, see the dependencies section below. For example:\r\n\r\n\t$ brew install gtk-doc swig\r\n\r\nThen build the build system with:\r\n\r\n\t$ ./bootstrap.sh\r\n\r\nDebug build:\r\n\r\n\t$ CFLAGS=\"-g -Wall\" CXXFLAGS=\"-g -Wall\" \\\r\n\t\t./configure --prefix=/home/john/vips --enable-debug\r\n\t$ make\r\n\t$ make install\r\n\r\nLeak check:\r\n\r\n\t$ export G_DEBUG=gc-friendly\r\n\t$ export G_SLICE=always-malloc\r\n\t$ valgrind --suppressions=libvips.supp \\\r\n\t\t--leak-check=yes \\\r\n\t\tvips ... > vips-vg.log 2>&1\r\n\r\nvalgrind threading check:\r\n\r\n\t$ valgrind --tool=helgrind vips ... > vips-vg.log 2>&1\r\n\r\nClang build:\r\n\r\n\t$ CC=clang CXX=clang++ ./configure --prefix=/home/john/vips\r\n\r\nClang static analysis:\r\n\r\n\t$ scan-build ./configure --disable-introspection\r\n\t$ scan-build -o scan -v make \r\n\t$ scan-view scan/2013-11-22-2\r\n\r\nClang dynamic analysis:\r\n\r\n\t$ FLAGS=\"-O1 -g -fsanitize=address\"\r\n\t$ FLAGS=\"$FLAGS -fno-omit-frame-pointer -fno-optimize-sibling-calls\"\r\n\t$ CC=clang CXX=clang++ LD=clang \\\r\n\t\tCFLAGS=\"$FLAGS\" CXXFLAGS=\"$FLAGS\" LDFLAGS=-fsanitize=address \\\r\n\t\t./configure --prefix=/home/john/vips \r\n\r\n\t$ FLAGS=\"-O1 -g -fsanitize=thread\"\r\n\t$ FLAGS=\"$FLAGS -fPIC -pie\"\r\n\t$ FLAGS=\"$FLAGS -fno-omit-frame-pointer -fno-optimize-sibling-calls\"\r\n\t$ CC=clang CXX=clang++ LD=clang \\\r\n\t\tCFLAGS=\"$FLAGS\" CXXFLAGS=\"$FLAGS\" \\\r\n\t\tLDFLAGS=\"-fsanitize=thread -fPIC -pie\" \\\r\n\t\t./configure --prefix=/home/john/vips \r\n\r\nBuild with the GCC auto-vectorizer and diagnostics (or just -O3):\r\n\r\n\t$ FLAGS=\"-O2 -msse4.2 -ffast-math\"\r\n\t$ FLAGS=\"$FLAGS -ftree-vectorize -fdump-tree-vect-details\"\r\n\t$ CFLAGS=\"$FLAGS\" CXXFLAGS=\"$FLAGS\" \\\r\n\t\t./configure --prefix=/home/john/vips \r\n\r\nStatic analysis with:\r\n\r\n\t$ cppcheck --force --enable=style . &> cppcheck.log\r\n\r\n# Dependencies \r\n\r\nlibvips has to have `gettext`, `glib2.0-dev` and `libxml2-dev`. Other\r\ndependencies are optional, see below.\r\n\r\n# Optional dependencies\r\n\r\nIf suitable versions are found, libvips will add support for the following\r\nlibraries automatically. See `./configure --help` for a set of flags to\r\ncontrol library detection. Packages are generally found with `pkg-config`,\r\nso make sure that is working.\r\n\r\nlibtiff, giflib and libjpeg do not usually use `pkg-config` so libvips looks for\r\nthem in the default path and in `$prefix`. If you have installed your own\r\nversions of these libraries in a different location, libvips will not see\r\nthem. Use switches to libvips configure like:\r\n\r\n\t./configure --prefix=/Users/john/vips \\\r\n\t\t--with-giflib-includes=/opt/local/include \\\r\n\t\t--with-giflib-libraries=/opt/local/lib \\\r\n\t\t--with-tiff-includes=/opt/local/include \\\r\n\t\t--with-tiff-libraries=/opt/local/lib \\\r\n\t\t--with-jpeg-includes=/opt/local/include \\\r\n\t\t--with-jpeg-libraries=/opt/local/lib\r\n\r\nor perhaps:\r\n\r\n\tCFLAGS=\"-g -Wall -I/opt/local/include -L/opt/local/lib\" \\\r\n\t\tCXXFLAGS=\"-g -Wall -I/opt/local/include -L/opt/local/lib\" \\\r\n\t\t./configure --without-python --prefix=/Users/john/vips \r\n\r\nto get libvips to see your builds.\r\n\r\n### vips8 Python binding\r\n\r\nIf `gobject-introspection`, `python-gi-dev`, and `libgirepository1.0-dev` are\r\navailable, libvips will install the vips8 Python binding. \r\n\r\n### libjpeg\r\n\r\nThe IJG JPEG library. Use the `-turbo` version if you can. \r\n\r\n### libexif\r\n\r\nIf available, libvips adds support for EXIF metadata in JPEG files.\r\n\r\n### giflib\r\n\r\nThe standard gif loader. If this is not present, vips will try to load gifs\r\nvia imagemagick instead.\r\n\r\n### librsvg\r\n\r\nThe usual SVG loader. If this is not present, vips will try to load SVGs\r\nvia imagemagick instead.\r\n\r\n### libpoppler\r\n\r\nThe usual PDF loader. If this is not present, vips will try to load PDFs\r\nvia imagemagick instead.\r\n\r\n### libgsf-1\r\n\r\nIf available, libvips adds support for creating image pyramids with `dzsave`. \r\n\r\n### libtiff\r\n\r\nThe TIFF library. It needs to be built with support for JPEG and\r\nZIP compression. 3.4b037 and later are known to be OK. \r\n\r\n### fftw3\r\n\r\nIf libvips finds this library, it uses it for fourier transforms. \r\n\r\n### lcms2, lcms\r\n\r\nIf present, `vips_icc_import()`, `vips_icc_export()` and `vips_icc_transform()`\r\nare available for transforming images with ICC profiles. If `lcms2` is \r\navailable it is used in preference to `lcms`, since it is faster.\r\n\r\n### Large files\r\n\r\nlibvips uses the standard autoconf tests to work out how to support\r\nlarge files (>2GB) on your system. Any reasonably recent unix should\r\nbe OK.\r\n\r\n### libpng\r\n\r\nIf present, libvips can load and save png files. \r\n\r\n### ImageMagick, or optionally GraphicsMagick\r\n\r\nIf available, libvips adds support for loading all libMagick-supported\r\nimage file types. Use `--with-magickpackage=GraphicsMagick` to build against \r\ngraphicsmagick instead.\r\n\r\nImagemagick 6.9+ needs to have been built with `--with-modules`. Most packaged\r\nIMs are, I think, but if you are rolling your own, you'll need to pass\r\nthis flag to configure. \r\n\r\nIf you are going to be using libvips with untrusted images, perhaps in a\r\nweb-server, for example, you should consider the security implications of\r\nusing a package with such a large attack surface. You might prefer not to\r\nenable Magick support. \r\n\r\n### pangoft2\r\n\r\nIf available, libvips adds support for text rendering. You need the\r\npackage pangoft2 in `pkg-config --list-all`.\r\n\r\n### orc-0.4\r\n\r\nIf available, vips will accelerate some operations with this run-time\r\ncompiler.\r\n\r\n### matio\r\n\r\nIf available, vips can load images from Matlab save files.\r\n\r\n### cfitsio\r\n\r\nIf available, vips can load FITS images.\r\n\r\n### libwebp\r\n\r\nIf available, vips can load and save WebP images.\r\n\r\n### OpenEXR\r\n\r\nIf available, libvips will directly read (but not write, sadly)\r\nOpenEXR images.\r\n\r\n### OpenSlide\r\n\r\nIf available, libvips can load OpenSlide-supported virtual slide\r\nfiles: Aperio, Hamamatsu, Leica, MIRAX, Sakura, Trestle, and Ventana.\r\n\r\n### swig, python, python-dev\r\n\r\nIf available, we build the vips7 python binding.\r\n\r\n# Disclaimer\r\n\r\nNo guarantees of performance accompany this software, nor is any\r\nresponsibility assumed on the part of the authors. Please read the licence\r\nagreement.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}